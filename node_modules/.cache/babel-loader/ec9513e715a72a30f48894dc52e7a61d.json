{"ast":null,"code":"import _classCallCheck from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/src/components/selectedcourse.jsx\";\nimport React, { Component } from \"react\";\nimport Comment from \"./comment\";\nimport NewComment from \"./newcomment\";\nimport Rating from \"./rating\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport Appbar from \"./appbar\";\nimport \"../App.css\";\nimport { throws } from \"assert\";\n\nvar SelectedCourse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SelectedCourse, _Component);\n\n  function SelectedCourse(props) {\n    var _this;\n\n    _classCallCheck(this, SelectedCourse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectedCourse).call(this, props));\n\n    _this.getSelectedCourse = function (id) {\n      axios.get(\"/api/course/\" + id).then(function (response) {\n        var data = JSON.parse(response.data);\n\n        _this.setState({\n          selected: data\n        });\n\n        _this.updateRatingBar();\n      });\n    };\n\n    _this.getComments = function (id) {\n      axios.get(\"/api/comments/\" + id).then(function (response) {\n        var data = JSON.parse(response.data);\n\n        if (data.length === 0) {\n          _this.setState({\n            comments: null\n          });\n\n          return;\n        }\n\n        _this.setState({\n          comments: data\n        });\n      });\n    };\n\n    _this.updateComments = function () {\n      _this.getComments(_this.state.id);\n    };\n\n    _this.updateRating = function () {\n      _this.getSelectedCourse(_this.state.id);\n    };\n\n    _this.updateRatingBar = function () {\n      var element = document.getElementById(\"progress\");\n      var ratingPercentage = _this.state.selected.rating * 20;\n      var ratingString = ratingPercentage.toString() + \"%\";\n      element.style[\"width\"] = ratingString;\n    };\n\n    _this.state = {\n      selected: {},\n      //stores the currently selected course's information\n      comments: null,\n      //stores the comments related to selected course\n      id: null //NEW: gets the id from url\n\n    };\n    return _this;\n  }\n\n  _createClass(SelectedCourse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var parsed = queryString.parse(this.props.location.search);\n      this.setState({\n        id: parsed.id\n      });\n      this.getSelectedCourse(parsed.id);\n      this.getComments(parsed.id);\n    } //this component is dependent from the course id it gets, so we have to listen to\n    //possible changes\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.courseid !== prevProps.courseid) {\n        this.getSelectedCourse(this.state.id);\n        this.getComments(this.state.id);\n      }\n    } //fetches the selected course's information from the server. the id is given to this component as a prop\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.selected.rating == null) {\n        return React.createElement(\"div\", {\n          id: \"progress\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"ladataan ratingia\");\n      } //there are no comments, so don't render the comments list\n      else if (this.state.comments === null) {\n          return React.createElement(\"div\", {\n            className: \"some-page-wrapper\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, React.createElement(Appbar, {\n            position: \"fixed\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            className: \"selectedCourse\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"course-view\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          }, React.createElement(\"h3\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106\n            },\n            __self: this\n          }, this.state.selected.coursename, \" \", this.state.selected.courseid, React.createElement(\"hr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          })), React.createElement(\"h4\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          }, \"Kurssin rating: \", this.state.selected.rating), React.createElement(\"div\", {\n            className: \"progress-bar\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            id: \"progress\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            },\n            __self: this\n          })), React.createElement(Rating, {\n            courseId: this.state.id,\n            updateFunction: this.updateRating,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            className: \"comments-list\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            },\n            __self: this\n          }, \"Ei kommentteja.\"), React.createElement(\"div\", {\n            className: \"new-comment\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }, React.createElement(NewComment, {\n            courseId: this.state.id,\n            updateFunction: this.updateComments,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          })))))));\n        } //course is selected and it has comments, display the information\n        else {\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 142\n              },\n              __self: this\n            }, React.createElement(Appbar, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 143\n              },\n              __self: this\n            }), React.createElement(\"div\", {\n              className: \"some-page-wrapper\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 144\n              },\n              __self: this\n            }, React.createElement(React.Fragment, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 145\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"row\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 146\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"column\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 147\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"selectedCourse\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 148\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"course-view\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 149\n              },\n              __self: this\n            }, React.createElement(\"h3\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 150\n              },\n              __self: this\n            }, this.state.selected.coursename, \" \", this.state.selected.courseid, React.createElement(\"hr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 153\n              },\n              __self: this\n            })), React.createElement(\"h4\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 155\n              },\n              __self: this\n            }, \"Kurssin rating: \", this.state.selected.rating.toFixed(2)), React.createElement(\"div\", {\n              className: \"progress-bar\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 159\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              id: \"progress\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 160\n              },\n              __self: this\n            })), React.createElement(Rating, {\n              courseId: this.state.id,\n              updateFunction: this.updateRating,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 163\n              },\n              __self: this\n            }), React.createElement(\"div\", {\n              className: \"comments-list\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 167\n              },\n              __self: this\n            }, React.createElement(\"ul\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 168\n              },\n              __self: this\n            }, this.state.comments.map(function (comment, index) {\n              return React.createElement(\"div\", {\n                key: comment._id,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 170\n                },\n                __self: this\n              }, React.createElement(Comment, {\n                text: comment.text,\n                upvotes: comment.upvotes,\n                downvotes: comment.downvotes,\n                username: comment.username,\n                commentId: comment._id,\n                index: index,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 171\n                },\n                __self: this\n              }), \" \", React.createElement(\"hr\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 179\n                },\n                __self: this\n              }));\n            }))), React.createElement(\"div\", {\n              className: \"new-comment\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 185\n              },\n              __self: this\n            }, React.createElement(NewComment, {\n              courseId: this.state.id,\n              updateFunction: this.updateComments,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 186\n              },\n              __self: this\n            })))))))));\n          }\n    }\n  }]);\n\n  return SelectedCourse;\n}(Component);\n\nexport default SelectedCourse;","map":{"version":3,"sources":["/home/joonas/LUT/programming/CodeCamp/TeamJJ/src/components/selectedcourse.jsx"],"names":["React","Component","Comment","NewComment","Rating","axios","queryString","Appbar","throws","SelectedCourse","props","getSelectedCourse","id","get","then","response","data","JSON","parse","setState","selected","updateRatingBar","getComments","length","comments","updateComments","state","updateRating","element","document","getElementById","ratingPercentage","rating","ratingString","toString","style","parsed","location","search","prevProps","prevState","courseid","coursename","toFixed","map","comment","index","_id","text","upvotes","downvotes","username"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Comment from \"./comment\";\nimport NewComment from \"./newcomment\";\n\nimport Rating from \"./rating\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport Appbar from \"./appbar\";\nimport \"../App.css\";\nimport { throws } from \"assert\";\n\nclass SelectedCourse extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: {}, //stores the currently selected course's information\n      comments: null, //stores the comments related to selected course\n      id: null //NEW: gets the id from url\n    };\n  }\n\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search);\n    this.setState({\n      id: parsed.id\n    });\n    this.getSelectedCourse(parsed.id);\n    this.getComments(parsed.id);\n    \n  }\n\n  //this component is dependent from the course id it gets, so we have to listen to\n  //possible changes\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.courseid !== prevProps.courseid) {\n      this.getSelectedCourse(this.state.id);\n      this.getComments(this.state.id);\n    }\n  }\n\n  //fetches the selected course's information from the server. the id is given to this component as a prop\n  getSelectedCourse = id => {\n    axios.get(\"/api/course/\" + id).then(response => {\n      let data = JSON.parse(response.data);\n      this.setState({\n        selected: data\n      });\n      this.updateRatingBar();\n    });\n  };\n\n  //fetch the comments of a certain course from the database\n  getComments = id => {\n    axios.get(\"/api/comments/\" + id).then(response => {\n      let data = JSON.parse(response.data);\n      if (data.length === 0) {\n        this.setState({\n          comments: null\n        });\n\n        return;\n      }\n      this.setState({\n        comments: data\n      });\n    });\n  };\n\n  //when a user posts a comment, this function is called from the child component.\n  updateComments = () => {\n    this.getComments(this.state.id);\n  };\n\n  updateRating = () => {\n    this.getSelectedCourse(this.state.id);\n  };\n\n  updateRatingBar = () => {\n    let element = document.getElementById(\"progress\");\n    let ratingPercentage = this.state.selected.rating * 20;\n    let ratingString = ratingPercentage.toString() + \"%\";\n    element.style[\"width\"] = ratingString;\n  };\n\n  render() {\n   \n\n    if (this.state.selected.rating == null) {\n\n      return (\n        <div id=\"progress\">\n          ladataan ratingia\n        </div>\n      )\n    }\n\n    //there are no comments, so don't render the comments list\n    else if (this.state.comments === null) {\n      return (\n        <div className=\"some-page-wrapper\">\n          <React.Fragment>\n            <Appbar position=\"fixed\" />\n            <div className=\"selectedCourse\">\n              <div className=\"course-view\">\n                <h3>\n                  {this.state.selected.coursename}{\" \"}\n                  {this.state.selected.courseid}\n                  <hr />\n                </h3>\n                <h4>Kurssin rating: {this.state.selected.rating}</h4>\n\n                <div className=\"progress-bar\">\n                  <div id=\"progress\" />\n                </div>\n\n                <Rating\n                  courseId={this.state.id}\n                  updateFunction={this.updateRating}\n                />\n\n                <div className=\"comments-list\">\n                  <p>Ei kommentteja.</p>\n\n                  <div className=\"new-comment\">\n                    <NewComment\n                      courseId={this.state.id}\n                      updateFunction={this.updateComments}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </React.Fragment>\n        </div>\n      );\n    }\n\n    //course is selected and it has comments, display the information\n    else {\n      return (\n        <div>\n          <Appbar />\n          <div className=\"some-page-wrapper\">\n            <React.Fragment>\n              <div className=\"row\">\n                <div className=\"column\">\n                  <div className=\"selectedCourse\">\n                    <div className=\"course-view\">\n                      <h3>\n                        {this.state.selected.coursename}{\" \"}\n                        {this.state.selected.courseid}\n                        <hr />\n                      </h3>\n                      <h4>\n                        Kurssin rating: {this.state.selected.rating.toFixed(2)}\n                      </h4>\n\n                      <div className=\"progress-bar\">\n                        <div id=\"progress\" />\n                      </div>\n\n                      <Rating\n                        courseId={this.state.id}\n                        updateFunction={this.updateRating}\n                      />\n                      <div className=\"comments-list\">\n                        <ul>\n                          {this.state.comments.map((comment, index) => (\n                            <div key={comment._id}>\n                              <Comment\n                                text={comment.text}\n                                upvotes={comment.upvotes}\n                                downvotes={comment.downvotes}\n                                username={comment.username}\n                                commentId={comment._id}\n                                index={index}\n                              />{\" \"}\n                              <hr />\n                            </div>\n                          ))}\n                        </ul>\n                      </div>\n\n                      <div className=\"new-comment\">\n                        <NewComment\n                          courseId={this.state.id}\n                          updateFunction={this.updateComments}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </React.Fragment>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default SelectedCourse;\n"]},"metadata":{},"sourceType":"module"}