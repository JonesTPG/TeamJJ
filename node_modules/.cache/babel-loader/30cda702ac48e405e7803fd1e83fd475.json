{"ast":null,"code":"import _classCallCheck from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/joonas/LUT/programming/CodeCamp/TeamJJ/src/components/selectedcourse.jsx\";\nimport React, { Component } from \"react\";\nimport Comment from \"./comment\";\nimport NewComment from \"./newcomment\";\nimport Rating from \"./rating\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport Appbar from \"./appbar\";\nimport \"../App.css\";\nimport { throws } from \"assert\";\n\nvar SelectedCourse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SelectedCourse, _Component);\n\n  function SelectedCourse(props) {\n    var _this;\n\n    _classCallCheck(this, SelectedCourse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectedCourse).call(this, props));\n\n    _this.getSelectedCourse = function (id) {\n      axios.get(\"/api/course/\" + id).then(function (response) {\n        var data = JSON.parse(response.data);\n\n        _this.setState({\n          selected: data\n        });\n\n        _this.updateRatingBar();\n      });\n    };\n\n    _this.getComments = function (id) {\n      axios.get(\"/api/comments/\" + id).then(function (response) {\n        var data = JSON.parse(response.data);\n\n        if (data.length === 0) {\n          _this.setState({\n            comments: null\n          });\n\n          return;\n        }\n\n        _this.setState({\n          comments: data\n        });\n      });\n    };\n\n    _this.updateComments = function () {\n      _this.getComments(_this.state.id);\n    };\n\n    _this.updateRating = function () {\n      _this.getSelectedCourse(_this.state.id);\n    };\n\n    _this.updateRatingBar = function () {\n      console.log('rating: ' + _this.state.selected.rating);\n      var element = document.getElementById(\"progress\");\n      var ratingPercentage = _this.state.selected.rating * 20;\n      var ratingString = ratingPercentage.toString() + \"%\";\n      element.style[\"width\"] = ratingString;\n    };\n\n    _this.state = {\n      selected: {\n        rating: 0\n      },\n      //stores the currently selected course's information\n      comments: null,\n      //stores the comments related to selected course\n      id: null //NEW: gets the id from url\n\n    };\n    return _this;\n  }\n\n  _createClass(SelectedCourse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var parsed = queryString.parse(this.props.location.search);\n      this.setState({\n        id: parsed.id\n      });\n      this.getSelectedCourse(parsed.id);\n      this.getComments(parsed.id);\n    } //this component is dependent from the course id it gets, so we have to listen to\n    //possible changes\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.courseid !== prevProps.courseid) {\n        this.getSelectedCourse(this.state.id);\n        this.getComments(this.state.id);\n      }\n    } //fetches the selected course's information from the server. the id is given to this component as a prop\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      //there are no comments, so don't render the comments list\n      if (this.state.comments === null) {\n        return React.createElement(\"div\", {\n          className: \"some-page-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"selectedCourse\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"course-view\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, this.state.selected.coursename, \" \", this.state.selected.courseid, React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        })), React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, \"Kurssin rating: \", this.state.selected.rating), React.createElement(\"div\", {\n          className: \"progress-bar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"progress\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        })), React.createElement(Rating, {\n          courseId: this.state.id,\n          updateFunction: this.updateRating,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"comments-list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"Ei kommentteja.\"), React.createElement(\"div\", {\n          className: \"new-comment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(NewComment, {\n          courseId: this.state.id,\n          updateFunction: this.updateComments,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        })))))));\n      } //course is selected and it has comments, display the information\n      else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"some-page-wrapper\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          }, React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"row\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"column\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"selectedCourse\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"course-view\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          }, React.createElement(\"h3\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            },\n            __self: this\n          }, this.state.selected.coursename, \" \", this.state.selected.courseid, React.createElement(\"hr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            },\n            __self: this\n          })), React.createElement(\"h4\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }, \"Kurssin rating: \", this.state.selected.rating.toFixed(2)), React.createElement(\"div\", {\n            className: \"progress-bar\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            id: \"progress\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155\n            },\n            __self: this\n          })), React.createElement(Rating, {\n            courseId: this.state.id,\n            updateFunction: this.updateRating,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            className: \"comments-list\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }, React.createElement(\"ul\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }, this.state.comments.map(function (comment, index) {\n            return React.createElement(\"div\", {\n              key: comment._id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 165\n              },\n              __self: this\n            }, React.createElement(Comment, {\n              text: comment.text,\n              upvotes: comment.upvotes,\n              downvotes: comment.downvotes,\n              username: comment.username,\n              commentId: comment._id,\n              index: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 166\n              },\n              __self: this\n            }), \" \", React.createElement(\"hr\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 174\n              },\n              __self: this\n            }));\n          }))), React.createElement(\"div\", {\n            className: \"new-comment\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180\n            },\n            __self: this\n          }, React.createElement(NewComment, {\n            courseId: this.state.id,\n            updateFunction: this.updateComments,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          })))))))));\n        }\n    }\n  }]);\n\n  return SelectedCourse;\n}(Component);\n\nexport default SelectedCourse;","map":{"version":3,"sources":["/home/joonas/LUT/programming/CodeCamp/TeamJJ/src/components/selectedcourse.jsx"],"names":["React","Component","Comment","NewComment","Rating","axios","queryString","Appbar","throws","SelectedCourse","props","getSelectedCourse","id","get","then","response","data","JSON","parse","setState","selected","updateRatingBar","getComments","length","comments","updateComments","state","updateRating","console","log","rating","element","document","getElementById","ratingPercentage","ratingString","toString","style","parsed","location","search","prevProps","prevState","courseid","coursename","toFixed","map","comment","index","_id","text","upvotes","downvotes","username"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Comment from \"./comment\";\nimport NewComment from \"./newcomment\";\n\nimport Rating from \"./rating\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport Appbar from \"./appbar\";\nimport \"../App.css\";\nimport { throws } from \"assert\";\n\nclass SelectedCourse extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: {\n        rating: 0\n      }, //stores the currently selected course's information\n      comments: null, //stores the comments related to selected course\n      id: null //NEW: gets the id from url\n    };\n  }\n\n  componentDidMount() {\n    const parsed = queryString.parse(this.props.location.search);\n    this.setState({\n      id: parsed.id\n    });\n    this.getSelectedCourse(parsed.id);\n    this.getComments(parsed.id); \n  }\n\n  //this component is dependent from the course id it gets, so we have to listen to\n  //possible changes\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.courseid !== prevProps.courseid) {\n      this.getSelectedCourse(this.state.id);\n      this.getComments(this.state.id);\n    }\n  }\n\n  //fetches the selected course's information from the server. the id is given to this component as a prop\n  getSelectedCourse = id => {\n    axios.get(\"/api/course/\" + id).then(response => {\n      let data = JSON.parse(response.data);\n      this.setState({\n        selected: data\n      });\n      this.updateRatingBar();\n    });\n  };\n\n  //fetch the comments of a certain course from the database\n  getComments = id => {\n    axios.get(\"/api/comments/\" + id).then(response => {\n      let data = JSON.parse(response.data);\n      if (data.length === 0) {\n        this.setState({\n          comments: null\n        });\n\n        return;\n      }\n      this.setState({\n        comments: data\n      });\n    });\n  };\n\n  //when a user posts a comment, this function is called from the child component.\n  updateComments = () => {\n    this.getComments(this.state.id);\n  };\n\n  updateRating = () => {\n    this.getSelectedCourse(this.state.id);\n   \n  };\n\n  updateRatingBar = () => {\n    console.log('rating: ' + this.state.selected.rating)\n    const element = document.getElementById(\"progress\");\n    const ratingPercentage = this.state.selected.rating * 20;\n    const ratingString = ratingPercentage.toString() + \"%\";\n    element.style[\"width\"] = ratingString;\n  };\n\n  render() {\n   \n\n    \n    //there are no comments, so don't render the comments list\n    if (this.state.comments === null) {\n      return (\n        <div className=\"some-page-wrapper\">\n          <React.Fragment>\n            \n            <div className=\"selectedCourse\">\n              <div className=\"course-view\">\n                <h3>\n                  {this.state.selected.coursename}{\" \"}\n                  {this.state.selected.courseid}\n                  <hr />\n                </h3>\n                <h4>Kurssin rating: {this.state.selected.rating}</h4>\n\n                <div className=\"progress-bar\">\n                  <div id=\"progress\" />\n                </div>\n\n                <Rating\n                  courseId={this.state.id}\n                  updateFunction={this.updateRating}\n                />\n\n                <div className=\"comments-list\">\n                  <p>Ei kommentteja.</p>\n\n                  <div className=\"new-comment\">\n                    <NewComment\n                      courseId={this.state.id}\n                      updateFunction={this.updateComments}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </React.Fragment>\n        </div>\n      );\n    }\n\n    //course is selected and it has comments, display the information\n    else {\n      return (\n        <div>\n         \n          <div className=\"some-page-wrapper\">\n            <React.Fragment>\n              <div className=\"row\">\n                <div className=\"column\">\n                  <div className=\"selectedCourse\">\n                    <div className=\"course-view\">\n                      <h3>\n                        {this.state.selected.coursename}{\" \"}\n                        {this.state.selected.courseid}\n                        <hr />\n                      </h3>\n                      <h4>\n                        Kurssin rating: {this.state.selected.rating.toFixed(2)}\n                      </h4>\n\n                      <div className=\"progress-bar\">\n                        <div id=\"progress\" />\n                      </div>\n\n                      <Rating\n                        courseId={this.state.id}\n                        updateFunction={this.updateRating}\n                      />\n                      <div className=\"comments-list\">\n                        <ul>\n                          {this.state.comments.map((comment, index) => (\n                            <div key={comment._id}>\n                              <Comment\n                                text={comment.text}\n                                upvotes={comment.upvotes}\n                                downvotes={comment.downvotes}\n                                username={comment.username}\n                                commentId={comment._id}\n                                index={index}\n                              />{\" \"}\n                              <hr />\n                            </div>\n                          ))}\n                        </ul>\n                      </div>\n\n                      <div className=\"new-comment\">\n                        <NewComment\n                          courseId={this.state.id}\n                          updateFunction={this.updateComments}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </React.Fragment>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default SelectedCourse;\n"]},"metadata":{},"sourceType":"module"}